generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int        @id @default(autoincrement())
  key         String     @unique // e.g., 'demographics', 'ai_models'
  label       String     // Display name for the tab
  description String?    // Description shown at the top of the category
  orderIndex  Int        @map("order_index")
  isActive    Boolean    @default(true) @map("is_active")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  questions   Question[]

  @@index([orderIndex])
  @@map("categories")
}

model Question {
  id          Int              @id @default(autoincrement())
  title       String
  description String?
  type        QuestionType
  category    String           // Keep for backward compatibility, will migrate to categoryId
  categoryId  Int?             @map("category_id")
  orderIndex  Int              @map("order_index")
  isRequired  Boolean          @default(false) @map("is_required")
  isActive    Boolean          @default(true) @map("is_active")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  options     QuestionOption[]
  responses   Response[]
  categoryRef Category?        @relation(fields: [categoryId], references: [id])

  @@index([categoryId])
  @@map("questions")
}

model QuestionOption {
  id          Int        @id @default(autoincrement())
  questionId  Int        @map("question_id")
  value       String
  label       String
  description String?
  orderIndex  Int        @map("order_index")
  isActive    Boolean    @default(true) @map("is_active")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  question    Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  responses   Response[]

  @@map("question_options")
}

model UserSession {
  id              String     @id
  demographicData Json?      @map("demographic_data")
  progress        Json?
  completedAt     DateTime?  @map("completed_at")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  responses       Response[]

  @@map("user_sessions")
}

model Response {
  id           Int             @id @default(autoincrement())
  sessionId    String          @map("session_id")
  questionId   Int             @map("question_id")
  optionId     Int?            @map("option_id")
  textValue    String?         @map("text_value")
  ratingValue  Int?            @map("rating_value")
  writeInValue String?         @map("write_in_value")
  
  // Single experience field that combines awareness, usage, and sentiment
  experience      Experience?      @map("experience")
  
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @updatedAt @map("updated_at")
  
  // Relations
  option       QuestionOption? @relation(fields: [optionId], references: [id])
  question     Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  session      UserSession     @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("responses")
}

model ExperienceMetric {
  id              Int      @id @default(autoincrement())
  toolName        String   @map("tool_name")
  category        String   // ai_tools, tools, frameworks
  
  // Experience counts (single axis)
  neverHeardCount      Int @default(0) @map("never_heard_count")
  wantToTryCount       Int @default(0) @map("want_to_try_count")
  notInterestedCount   Int @default(0) @map("not_interested_count")
  wouldUseAgainCount   Int @default(0) @map("would_use_again_count")
  wouldNotUseCount     Int @default(0) @map("would_not_use_count")
  
  // Derived metrics
  awarenessRate        Float?   @map("awareness_rate")     // % who have heard of it
  adoptionRate         Float?   @map("adoption_rate")      // % who have used it
  satisfactionRate     Float?   @map("satisfaction_rate")  // % of users who would use again
  
  totalResponses       Int @default(0) @map("total_responses")
  calculatedAt         DateTime @default(now()) @map("calculated_at")
  
  @@unique([toolName])
  @@index([category])
  @@map("experience_metrics")
}

model ExperienceTrend {
  id              Int      @id @default(autoincrement())
  toolName        String   @map("tool_name")
  category        String
  
  // Monthly snapshot
  month           DateTime @map("month")
  awarenessRate   Float    @map("awareness_rate")
  adoptionRate    Float    @map("adoption_rate")
  satisfactionRate Float   @map("satisfaction_rate")
  changeFromPrev  Float?   @map("change_from_prev")
  
  // Distribution snapshot
  distribution    Json?    @map("distribution")       // JSON object with count per experience level
  byDemographic   Json?    @map("by_demographic")     // JSON object with rates by demographics
  
  createdAt       DateTime @default(now()) @map("created_at")
  
  @@unique([toolName, month])
  @@index([category, month])
  @@map("experience_trends")
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  RATING
  TEXT
  DEMOGRAPHIC
  EXPERIENCE // Single axis: Never heard/Want to try/Not interested/Would use again/Would not use again
  WRITE_IN    // Optional write-in field
}

enum Experience {
  NEVER_HEARD       // ü§∑ Never heard of it / not sure what it is
  WANT_TO_TRY       // ‚úÖ Heard of it, would like to try it
  NOT_INTERESTED    // üö´ Heard of it, not interested
  WOULD_USE_AGAIN   // üëç Used it, would use again
  WOULD_NOT_USE     // üëé Used it, would not use again
}
